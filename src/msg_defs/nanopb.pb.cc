// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nanopb.proto

#include "nanopb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR NanoPBOptions::NanoPBOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.include_)*/{}
  , /*decltype(_impl_.exclude_)*/{}
  , /*decltype(_impl_.callback_datatype_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.callback_function_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.package_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_size_)*/0
  , /*decltype(_impl_.max_count_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.int_size_)*/0
  , /*decltype(_impl_.packed_struct_)*/false
  , /*decltype(_impl_.packed_enum_)*/false
  , /*decltype(_impl_.skip_message_)*/false
  , /*decltype(_impl_.no_unions_)*/false
  , /*decltype(_impl_.msgid_)*/0u
  , /*decltype(_impl_.max_length_)*/0
  , /*decltype(_impl_.anonymous_oneof_)*/false
  , /*decltype(_impl_.proto3_)*/false
  , /*decltype(_impl_.proto3_singular_msgs_)*/false
  , /*decltype(_impl_.enum_to_string_)*/false
  , /*decltype(_impl_.mangle_names_)*/0
  , /*decltype(_impl_.fixed_length_)*/false
  , /*decltype(_impl_.fixed_count_)*/false
  , /*decltype(_impl_.submsg_callback_)*/false
  , /*decltype(_impl_.default_has_)*/false
  , /*decltype(_impl_.descriptorsize_)*/0
  , /*decltype(_impl_.fallback_type_)*/1
  , /*decltype(_impl_.long_names_)*/true
  , /*decltype(_impl_.sort_by_tag_)*/true
  , /*decltype(_impl_.type_override_)*/1} {}
struct NanoPBOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NanoPBOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NanoPBOptionsDefaultTypeInternal() {}
  union {
    NanoPBOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NanoPBOptionsDefaultTypeInternal _NanoPBOptions_default_instance_;
static ::_pb::Metadata file_level_metadata_nanopb_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_nanopb_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_nanopb_2eproto = nullptr;

const uint32_t TableStruct_nanopb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.max_size_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.max_length_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.max_count_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.int_size_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.long_names_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.packed_struct_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.packed_enum_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.skip_message_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.no_unions_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.anonymous_oneof_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.proto3_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.proto3_singular_msgs_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.enum_to_string_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.fixed_length_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.fixed_count_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.submsg_callback_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.mangle_names_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.callback_datatype_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.callback_function_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.descriptorsize_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.default_has_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.include_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.exclude_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.package_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.type_override_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.sort_by_tag_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _impl_.fallback_type_),
  3,
  12,
  4,
  6,
  5,
  24,
  7,
  8,
  9,
  10,
  11,
  13,
  14,
  15,
  16,
  18,
  19,
  20,
  17,
  0,
  1,
  22,
  21,
  ~0u,
  ~0u,
  2,
  26,
  25,
  23,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 35, -1, sizeof(::NanoPBOptions)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_NanoPBOptions_default_instance_._instance,
};

const char descriptor_table_protodef_nanopb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014nanopb.proto\032 google/protobuf/descript"
  "or.proto\"\244\007\n\rNanoPBOptions\022\020\n\010max_size\030\001"
  " \001(\005\022\022\n\nmax_length\030\016 \001(\005\022\021\n\tmax_count\030\002 "
  "\001(\005\022&\n\010int_size\030\007 \001(\0162\010.IntSize:\nIS_DEFA"
  "ULT\022$\n\004type\030\003 \001(\0162\n.FieldType:\nFT_DEFAUL"
  "T\022\030\n\nlong_names\030\004 \001(\010:\004true\022\034\n\rpacked_st"
  "ruct\030\005 \001(\010:\005false\022\032\n\013packed_enum\030\n \001(\010:\005"
  "false\022\033\n\014skip_message\030\006 \001(\010:\005false\022\030\n\tno"
  "_unions\030\010 \001(\010:\005false\022\r\n\005msgid\030\t \001(\r\022\036\n\017a"
  "nonymous_oneof\030\013 \001(\010:\005false\022\025\n\006proto3\030\014 "
  "\001(\010:\005false\022#\n\024proto3_singular_msgs\030\025 \001(\010"
  ":\005false\022\035\n\016enum_to_string\030\r \001(\010:\005false\022\033"
  "\n\014fixed_length\030\017 \001(\010:\005false\022\032\n\013fixed_cou"
  "nt\030\020 \001(\010:\005false\022\036\n\017submsg_callback\030\026 \001(\010"
  ":\005false\022/\n\014mangle_names\030\021 \001(\0162\021.Typename"
  "Mangling:\006M_NONE\022(\n\021callback_datatype\030\022 "
  "\001(\t:\rpb_callback_t\0224\n\021callback_function\030"
  "\023 \001(\t:\031pb_default_field_callback\0220\n\016desc"
  "riptorsize\030\024 \001(\0162\017.DescriptorSize:\007DS_AU"
  "TO\022\032\n\013default_has\030\027 \001(\010:\005false\022\017\n\007includ"
  "e\030\030 \003(\t\022\017\n\007exclude\030\032 \003(\t\022\017\n\007package\030\031 \001("
  "\t\022A\n\rtype_override\030\033 \001(\0162*.google.protob"
  "uf.FieldDescriptorProto.Type\022\031\n\013sort_by_"
  "tag\030\034 \001(\010:\004true\022.\n\rfallback_type\030\035 \001(\0162\n"
  ".FieldType:\013FT_CALLBACK*i\n\tFieldType\022\016\n\n"
  "FT_DEFAULT\020\000\022\017\n\013FT_CALLBACK\020\001\022\016\n\nFT_POIN"
  "TER\020\004\022\r\n\tFT_STATIC\020\002\022\r\n\tFT_IGNORE\020\003\022\r\n\tF"
  "T_INLINE\020\005*D\n\007IntSize\022\016\n\nIS_DEFAULT\020\000\022\010\n"
  "\004IS_8\020\010\022\t\n\005IS_16\020\020\022\t\n\005IS_32\020 \022\t\n\005IS_64\020@"
  "*Z\n\020TypenameMangling\022\n\n\006M_NONE\020\000\022\023\n\017M_ST"
  "RIP_PACKAGE\020\001\022\r\n\tM_FLATTEN\020\002\022\026\n\022M_PACKAG"
  "E_INITIALS\020\003*E\n\016DescriptorSize\022\013\n\007DS_AUT"
  "O\020\000\022\010\n\004DS_1\020\001\022\010\n\004DS_2\020\002\022\010\n\004DS_4\020\004\022\010\n\004DS_"
  "8\020\010:E\n\016nanopb_fileopt\022\034.google.protobuf."
  "FileOptions\030\362\007 \001(\0132\016.NanoPBOptions:G\n\rna"
  "nopb_msgopt\022\037.google.protobuf.MessageOpt"
  "ions\030\362\007 \001(\0132\016.NanoPBOptions:E\n\016nanopb_en"
  "umopt\022\034.google.protobuf.EnumOptions\030\362\007 \001"
  "(\0132\016.NanoPBOptions:>\n\006nanopb\022\035.google.pr"
  "otobuf.FieldOptions\030\362\007 \001(\0132\016.NanoPBOptio"
  "nsB\032\n\030fi.kapsi.koti.jpa.nanopb"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_nanopb_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::_pbi::once_flag descriptor_table_nanopb_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_nanopb_2eproto = {
    false, false, 1630, descriptor_table_protodef_nanopb_2eproto,
    "nanopb.proto",
    &descriptor_table_nanopb_2eproto_once, descriptor_table_nanopb_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_nanopb_2eproto::offsets,
    file_level_metadata_nanopb_2eproto, file_level_enum_descriptors_nanopb_2eproto,
    file_level_service_descriptors_nanopb_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_nanopb_2eproto_getter() {
  return &descriptor_table_nanopb_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_nanopb_2eproto(&descriptor_table_nanopb_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nanopb_2eproto);
  return file_level_enum_descriptors_nanopb_2eproto[0];
}
bool FieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntSize_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nanopb_2eproto);
  return file_level_enum_descriptors_nanopb_2eproto[1];
}
bool IntSize_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypenameMangling_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nanopb_2eproto);
  return file_level_enum_descriptors_nanopb_2eproto[2];
}
bool TypenameMangling_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DescriptorSize_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nanopb_2eproto);
  return file_level_enum_descriptors_nanopb_2eproto[3];
}
bool DescriptorSize_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NanoPBOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<NanoPBOptions>()._impl_._has_bits_);
  static void set_has_max_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_int_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_long_names(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_packed_struct(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_packed_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_skip_message(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_no_unions(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_msgid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_anonymous_oneof(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_proto3(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_proto3_singular_msgs(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_enum_to_string(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_fixed_length(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_fixed_count(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_submsg_callback(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_mangle_names(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_callback_datatype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_callback_function(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_descriptorsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_default_has(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_package(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type_override(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_sort_by_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_fallback_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NanoPBOptions::Impl_::_i_give_permission_to_break_this_code_default_callback_datatype_{{{"pb_callback_t", 13}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NanoPBOptions::Impl_::_i_give_permission_to_break_this_code_default_callback_function_{{{"pb_default_field_callback", 25}}, {nullptr}};
NanoPBOptions::NanoPBOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NanoPBOptions)
}
NanoPBOptions::NanoPBOptions(const NanoPBOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NanoPBOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.include_){from._impl_.include_}
    , decltype(_impl_.exclude_){from._impl_.exclude_}
    , decltype(_impl_.callback_datatype_){}
    , decltype(_impl_.callback_function_){}
    , decltype(_impl_.package_){}
    , decltype(_impl_.max_size_){}
    , decltype(_impl_.max_count_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.int_size_){}
    , decltype(_impl_.packed_struct_){}
    , decltype(_impl_.packed_enum_){}
    , decltype(_impl_.skip_message_){}
    , decltype(_impl_.no_unions_){}
    , decltype(_impl_.msgid_){}
    , decltype(_impl_.max_length_){}
    , decltype(_impl_.anonymous_oneof_){}
    , decltype(_impl_.proto3_){}
    , decltype(_impl_.proto3_singular_msgs_){}
    , decltype(_impl_.enum_to_string_){}
    , decltype(_impl_.mangle_names_){}
    , decltype(_impl_.fixed_length_){}
    , decltype(_impl_.fixed_count_){}
    , decltype(_impl_.submsg_callback_){}
    , decltype(_impl_.default_has_){}
    , decltype(_impl_.descriptorsize_){}
    , decltype(_impl_.fallback_type_){}
    , decltype(_impl_.long_names_){}
    , decltype(_impl_.sort_by_tag_){}
    , decltype(_impl_.type_override_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.callback_datatype_.InitDefault();
  if (from._internal_has_callback_datatype()) {
    _this->_impl_.callback_datatype_.Set(from._internal_callback_datatype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.callback_function_.InitDefault();
  if (from._internal_has_callback_function()) {
    _this->_impl_.callback_function_.Set(from._internal_callback_function(), 
      _this->GetArenaForAllocation());
  }
  _impl_.package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package()) {
    _this->_impl_.package_.Set(from._internal_package(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_size_, &from._impl_.max_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_override_) -
    reinterpret_cast<char*>(&_impl_.max_size_)) + sizeof(_impl_.type_override_));
  // @@protoc_insertion_point(copy_constructor:NanoPBOptions)
}

inline void NanoPBOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.include_){arena}
    , decltype(_impl_.exclude_){arena}
    , decltype(_impl_.callback_datatype_){}
    , decltype(_impl_.callback_function_){}
    , decltype(_impl_.package_){}
    , decltype(_impl_.max_size_){0}
    , decltype(_impl_.max_count_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.int_size_){0}
    , decltype(_impl_.packed_struct_){false}
    , decltype(_impl_.packed_enum_){false}
    , decltype(_impl_.skip_message_){false}
    , decltype(_impl_.no_unions_){false}
    , decltype(_impl_.msgid_){0u}
    , decltype(_impl_.max_length_){0}
    , decltype(_impl_.anonymous_oneof_){false}
    , decltype(_impl_.proto3_){false}
    , decltype(_impl_.proto3_singular_msgs_){false}
    , decltype(_impl_.enum_to_string_){false}
    , decltype(_impl_.mangle_names_){0}
    , decltype(_impl_.fixed_length_){false}
    , decltype(_impl_.fixed_count_){false}
    , decltype(_impl_.submsg_callback_){false}
    , decltype(_impl_.default_has_){false}
    , decltype(_impl_.descriptorsize_){0}
    , decltype(_impl_.fallback_type_){1}
    , decltype(_impl_.long_names_){true}
    , decltype(_impl_.sort_by_tag_){true}
    , decltype(_impl_.type_override_){1}
  };
  _impl_.callback_datatype_.InitDefault();
  _impl_.callback_function_.InitDefault();
  _impl_.package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NanoPBOptions::~NanoPBOptions() {
  // @@protoc_insertion_point(destructor:NanoPBOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NanoPBOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.include_.~RepeatedPtrField();
  _impl_.exclude_.~RepeatedPtrField();
  _impl_.callback_datatype_.Destroy();
  _impl_.callback_function_.Destroy();
  _impl_.package_.Destroy();
}

void NanoPBOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NanoPBOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:NanoPBOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.include_.Clear();
  _impl_.exclude_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.callback_datatype_.ClearToDefault(::NanoPBOptions::Impl_::_i_give_permission_to_break_this_code_default_callback_datatype_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.callback_function_.ClearToDefault(::NanoPBOptions::Impl_::_i_give_permission_to_break_this_code_default_callback_function_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      _impl_.package_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.max_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.packed_struct_) -
        reinterpret_cast<char*>(&_impl_.max_size_)) + sizeof(_impl_.packed_struct_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.packed_enum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.proto3_singular_msgs_) -
        reinterpret_cast<char*>(&_impl_.packed_enum_)) + sizeof(_impl_.proto3_singular_msgs_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.enum_to_string_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.descriptorsize_) -
        reinterpret_cast<char*>(&_impl_.enum_to_string_)) + sizeof(_impl_.descriptorsize_));
    _impl_.fallback_type_ = 1;
  }
  if (cached_has_bits & 0x07000000u) {
    _impl_.long_names_ = true;
    _impl_.sort_by_tag_ = true;
    _impl_.type_override_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NanoPBOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 max_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_size(&has_bits);
          _impl_.max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_count(&has_bits);
          _impl_.max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .FieldType type = 3 [default = FT_DEFAULT];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::FieldType_IsValid(val))) {
            _internal_set_type(static_cast<::FieldType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool long_names = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_long_names(&has_bits);
          _impl_.long_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool packed_struct = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_packed_struct(&has_bits);
          _impl_.packed_struct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_message = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_skip_message(&has_bits);
          _impl_.skip_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .IntSize int_size = 7 [default = IS_DEFAULT];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::IntSize_IsValid(val))) {
            _internal_set_int_size(static_cast<::IntSize>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool no_unions = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_no_unions(&has_bits);
          _impl_.no_unions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 msgid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_msgid(&has_bits);
          _impl_.msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool packed_enum = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_packed_enum(&has_bits);
          _impl_.packed_enum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool anonymous_oneof = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_anonymous_oneof(&has_bits);
          _impl_.anonymous_oneof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool proto3 = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_proto3(&has_bits);
          _impl_.proto3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enum_to_string = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_enum_to_string(&has_bits);
          _impl_.enum_to_string_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_length = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_max_length(&has_bits);
          _impl_.max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fixed_length = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_fixed_length(&has_bits);
          _impl_.fixed_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fixed_count = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_fixed_count(&has_bits);
          _impl_.fixed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TypenameMangling mangle_names = 17 [default = M_NONE];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TypenameMangling_IsValid(val))) {
            _internal_set_mangle_names(static_cast<::TypenameMangling>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string callback_datatype = 18 [default = "pb_callback_t"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_callback_datatype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "NanoPBOptions.callback_datatype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string callback_function = 19 [default = "pb_default_field_callback"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_callback_function();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "NanoPBOptions.callback_function");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .DescriptorSize descriptorsize = 20 [default = DS_AUTO];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DescriptorSize_IsValid(val))) {
            _internal_set_descriptorsize(static_cast<::DescriptorSize>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool proto3_singular_msgs = 21 [default = false];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_proto3_singular_msgs(&has_bits);
          _impl_.proto3_singular_msgs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool submsg_callback = 22 [default = false];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_submsg_callback(&has_bits);
          _impl_.submsg_callback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool default_has = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_default_has(&has_bits);
          _impl_.default_has_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string include = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_include();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "NanoPBOptions.include");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string package = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_package();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "NanoPBOptions.package");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string exclude = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_exclude();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "NanoPBOptions.exclude");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.FieldDescriptorProto.Type type_override = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type_IsValid(val))) {
            _internal_set_type_override(static_cast<::PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool sort_by_tag = 28 [default = true];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_sort_by_tag(&has_bits);
          _impl_.sort_by_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .FieldType fallback_type = 29 [default = FT_CALLBACK];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::FieldType_IsValid(val))) {
            _internal_set_fallback_type(static_cast<::FieldType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NanoPBOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoPBOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 max_size = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_size(), target);
  }

  // optional int32 max_count = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_count(), target);
  }

  // optional .FieldType type = 3 [default = FT_DEFAULT];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional bool long_names = 4 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_long_names(), target);
  }

  // optional bool packed_struct = 5 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_packed_struct(), target);
  }

  // optional bool skip_message = 6 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_skip_message(), target);
  }

  // optional .IntSize int_size = 7 [default = IS_DEFAULT];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_int_size(), target);
  }

  // optional bool no_unions = 8 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_no_unions(), target);
  }

  // optional uint32 msgid = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_msgid(), target);
  }

  // optional bool packed_enum = 10 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_packed_enum(), target);
  }

  // optional bool anonymous_oneof = 11 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_anonymous_oneof(), target);
  }

  // optional bool proto3 = 12 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_proto3(), target);
  }

  // optional bool enum_to_string = 13 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_enum_to_string(), target);
  }

  // optional int32 max_length = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_length(), target);
  }

  // optional bool fixed_length = 15 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_fixed_length(), target);
  }

  // optional bool fixed_count = 16 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_fixed_count(), target);
  }

  // optional .TypenameMangling mangle_names = 17 [default = M_NONE];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_mangle_names(), target);
  }

  // optional string callback_datatype = 18 [default = "pb_callback_t"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_callback_datatype().data(), static_cast<int>(this->_internal_callback_datatype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.callback_datatype");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_callback_datatype(), target);
  }

  // optional string callback_function = 19 [default = "pb_default_field_callback"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_callback_function().data(), static_cast<int>(this->_internal_callback_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.callback_function");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_callback_function(), target);
  }

  // optional .DescriptorSize descriptorsize = 20 [default = DS_AUTO];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_descriptorsize(), target);
  }

  // optional bool proto3_singular_msgs = 21 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_proto3_singular_msgs(), target);
  }

  // optional bool submsg_callback = 22 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_submsg_callback(), target);
  }

  // optional bool default_has = 23 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_default_has(), target);
  }

  // repeated string include = 24;
  for (int i = 0, n = this->_internal_include_size(); i < n; i++) {
    const auto& s = this->_internal_include(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.include");
    target = stream->WriteString(24, s, target);
  }

  // optional string package = 25;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package().data(), static_cast<int>(this->_internal_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.package");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_package(), target);
  }

  // repeated string exclude = 26;
  for (int i = 0, n = this->_internal_exclude_size(); i < n; i++) {
    const auto& s = this->_internal_exclude(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.exclude");
    target = stream->WriteString(26, s, target);
  }

  // optional .google.protobuf.FieldDescriptorProto.Type type_override = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_type_override(), target);
  }

  // optional bool sort_by_tag = 28 [default = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_sort_by_tag(), target);
  }

  // optional .FieldType fallback_type = 29 [default = FT_CALLBACK];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      29, this->_internal_fallback_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NanoPBOptions)
  return target;
}

size_t NanoPBOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NanoPBOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string include = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.include_.size());
  for (int i = 0, n = _impl_.include_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.include_.Get(i));
  }

  // repeated string exclude = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exclude_.size());
  for (int i = 0, n = _impl_.exclude_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exclude_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string callback_datatype = 18 [default = "pb_callback_t"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_callback_datatype());
    }

    // optional string callback_function = 19 [default = "pb_default_field_callback"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_callback_function());
    }

    // optional string package = 25;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_package());
    }

    // optional int32 max_size = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_size());
    }

    // optional int32 max_count = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_count());
    }

    // optional .FieldType type = 3 [default = FT_DEFAULT];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .IntSize int_size = 7 [default = IS_DEFAULT];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_int_size());
    }

    // optional bool packed_struct = 5 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool packed_enum = 10 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool skip_message = 6 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool no_unions = 8 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 msgid = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgid());
    }

    // optional int32 max_length = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_length());
    }

    // optional bool anonymous_oneof = 11 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool proto3 = 12 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool proto3_singular_msgs = 21 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool enum_to_string = 13 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional .TypenameMangling mangle_names = 17 [default = M_NONE];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mangle_names());
    }

    // optional bool fixed_length = 15 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool fixed_count = 16 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool submsg_callback = 22 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool default_has = 23 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional .DescriptorSize descriptorsize = 20 [default = DS_AUTO];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_descriptorsize());
    }

    // optional .FieldType fallback_type = 29 [default = FT_CALLBACK];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fallback_type());
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional bool long_names = 4 [default = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool sort_by_tag = 28 [default = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional .google.protobuf.FieldDescriptorProto.Type type_override = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type_override());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NanoPBOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NanoPBOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NanoPBOptions::GetClassData() const { return &_class_data_; }


void NanoPBOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NanoPBOptions*>(&to_msg);
  auto& from = static_cast<const NanoPBOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NanoPBOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.include_.MergeFrom(from._impl_.include_);
  _this->_impl_.exclude_.MergeFrom(from._impl_.exclude_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_callback_datatype(from._internal_callback_datatype());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_callback_function(from._internal_callback_function());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_package(from._internal_package());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.max_size_ = from._impl_.max_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.max_count_ = from._impl_.max_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.int_size_ = from._impl_.int_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.packed_struct_ = from._impl_.packed_struct_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.packed_enum_ = from._impl_.packed_enum_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.skip_message_ = from._impl_.skip_message_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.no_unions_ = from._impl_.no_unions_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.msgid_ = from._impl_.msgid_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.max_length_ = from._impl_.max_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.anonymous_oneof_ = from._impl_.anonymous_oneof_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.proto3_ = from._impl_.proto3_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.proto3_singular_msgs_ = from._impl_.proto3_singular_msgs_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.enum_to_string_ = from._impl_.enum_to_string_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.mangle_names_ = from._impl_.mangle_names_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.fixed_length_ = from._impl_.fixed_length_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.fixed_count_ = from._impl_.fixed_count_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.submsg_callback_ = from._impl_.submsg_callback_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.default_has_ = from._impl_.default_has_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.descriptorsize_ = from._impl_.descriptorsize_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.fallback_type_ = from._impl_.fallback_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.long_names_ = from._impl_.long_names_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.sort_by_tag_ = from._impl_.sort_by_tag_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.type_override_ = from._impl_.type_override_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NanoPBOptions::CopyFrom(const NanoPBOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NanoPBOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NanoPBOptions::IsInitialized() const {
  return true;
}

void NanoPBOptions::InternalSwap(NanoPBOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.include_.InternalSwap(&other->_impl_.include_);
  _impl_.exclude_.InternalSwap(&other->_impl_.exclude_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.callback_datatype_, lhs_arena,
      &other->_impl_.callback_datatype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.callback_function_, lhs_arena,
      &other->_impl_.callback_function_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_, lhs_arena,
      &other->_impl_.package_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NanoPBOptions, _impl_.descriptorsize_)
      + sizeof(NanoPBOptions::_impl_.descriptorsize_)
      - PROTOBUF_FIELD_OFFSET(NanoPBOptions, _impl_.max_size_)>(
          reinterpret_cast<char*>(&_impl_.max_size_),
          reinterpret_cast<char*>(&other->_impl_.max_size_));
  swap(_impl_.fallback_type_, other->_impl_.fallback_type_);
  swap(_impl_.long_names_, other->_impl_.long_names_);
  swap(_impl_.sort_by_tag_, other->_impl_.sort_by_tag_);
  swap(_impl_.type_override_, other->_impl_.type_override_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NanoPBOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nanopb_2eproto_getter, &descriptor_table_nanopb_2eproto_once,
      file_level_metadata_nanopb_2eproto[0]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false>
  nanopb_fileopt(kNanopbFileoptFieldNumber, ::NanoPBOptions::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false>
  nanopb_msgopt(kNanopbMsgoptFieldNumber, ::NanoPBOptions::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false>
  nanopb_enumopt(kNanopbEnumoptFieldNumber, ::NanoPBOptions::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false>
  nanopb(kNanopbFieldNumber, ::NanoPBOptions::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NanoPBOptions*
Arena::CreateMaybeMessage< ::NanoPBOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NanoPBOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
