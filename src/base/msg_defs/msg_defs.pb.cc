// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_defs.proto

#include "msg_defs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace logpb {
PROTOBUF_CONSTEXPR Pressure::Pressure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pressure_)*/0
  , /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_.type_)*/1} {}
struct PressureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PressureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PressureDefaultTypeInternal() {}
  union {
    Pressure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PressureDefaultTypeInternal _Pressure_default_instance_;
PROTOBUF_CONSTEXPR Force_Speed::Force_Speed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.val_)*/0
  , /*decltype(_impl_.t_)*/1} {}
struct Force_SpeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Force_SpeedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Force_SpeedDefaultTypeInternal() {}
  union {
    Force_Speed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Force_SpeedDefaultTypeInternal _Force_Speed_default_instance_;
PROTOBUF_CONSTEXPR Force::Force(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.temperature_)*/{}
  , /*decltype(_impl_.s_)*/{}
  , /*decltype(_impl_.force_)*/0
  , /*decltype(_impl_.type_)*/2} {}
struct ForceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForceDefaultTypeInternal() {}
  union {
    Force _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForceDefaultTypeInternal _Force_default_instance_;
PROTOBUF_CONSTEXPR Data::Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pressure_)*/{}
  , /*decltype(_impl_.force_)*/{}
  , /*decltype(_impl_.type_)*/3} {}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;
}  // namespace logpb
static ::_pb::Metadata file_level_metadata_msg_5fdefs_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_5fdefs_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_5fdefs_2eproto = nullptr;

const uint32_t TableStruct_msg_5fdefs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::logpb::Pressure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::logpb::Pressure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::logpb::Pressure, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::logpb::Pressure, _impl_.pressure_),
  PROTOBUF_FIELD_OFFSET(::logpb::Pressure, _impl_.temperature_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::logpb::Force_Speed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::logpb::Force_Speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::logpb::Force_Speed, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::logpb::Force_Speed, _impl_.val_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::logpb::Force, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::logpb::Force, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::logpb::Force, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::logpb::Force, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::logpb::Force, _impl_.temperature_),
  PROTOBUF_FIELD_OFFSET(::logpb::Force, _impl_.s_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::logpb::Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::logpb::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::logpb::Data, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::logpb::Data, _impl_.pressure_),
  PROTOBUF_FIELD_OFFSET(::logpb::Data, _impl_.force_),
  0,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::logpb::Pressure)},
  { 12, 20, -1, sizeof(::logpb::Force_Speed)},
  { 22, 32, -1, sizeof(::logpb::Force)},
  { 36, 45, -1, sizeof(::logpb::Data)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::logpb::_Pressure_default_instance_._instance,
  &::logpb::_Force_Speed_default_instance_._instance,
  &::logpb::_Force_default_instance_._instance,
  &::logpb::_Data_default_instance_._instance,
};

const char descriptor_table_protodef_msg_5fdefs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016msg_defs.proto\022\005logpb\032\014nanopb.proto\"k\n"
  "\010Pressure\0221\n\004type\030\001 \001(\0162\024.logpb.Message_"
  "Types:\rPressure_Type\022\020\n\010pressure\030\002 \001(\017\022\023"
  "\n\013temperature\030\003 \001(\017:\005\222\?\002He\"\325\001\n\005Force\022.\n\004"
  "type\030\001 \001(\0162\024.logpb.Message_Types:\nForce_"
  "Type\022\r\n\005force\030\002 \001(\017\022\023\n\013temperature\030\003 \003(\017"
  "\022\035\n\001s\030\004 \003(\0132\022.logpb.Force.Speed\032R\n\005Speed"
  "\022\"\n\001t\030\001 \002(\0162\027.logpb.Force.Speed.Type\022\013\n\003"
  "val\030\002 \001(\017\"\030\n\004Type\022\007\n\003I2C\020\001\022\007\n\003SPI\020\002:\005\222\?\002"
  "Hf\"|\n\004Data\022-\n\004type\030\001 \001(\0162\024.logpb.Message"
  "_Types:\tData_Type\022!\n\010pressure\030\002 \003(\0132\017.lo"
  "gpb.Pressure\022\033\n\005force\030\003 \003(\0132\014.logpb.Forc"
  "e:\005\222\?\002Hg*A\n\rMessage_Types\022\021\n\rPressure_Ty"
  "pe\020\001\022\016\n\nForce_Type\020\002\022\r\n\tData_Type\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_msg_5fdefs_2eproto_deps[1] = {
  &::descriptor_table_nanopb_2eproto,
};
static ::_pbi::once_flag descriptor_table_msg_5fdefs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_5fdefs_2eproto = {
    false, false, 555, descriptor_table_protodef_msg_5fdefs_2eproto,
    "msg_defs.proto",
    &descriptor_table_msg_5fdefs_2eproto_once, descriptor_table_msg_5fdefs_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_msg_5fdefs_2eproto::offsets,
    file_level_metadata_msg_5fdefs_2eproto, file_level_enum_descriptors_msg_5fdefs_2eproto,
    file_level_service_descriptors_msg_5fdefs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_5fdefs_2eproto_getter() {
  return &descriptor_table_msg_5fdefs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_5fdefs_2eproto(&descriptor_table_msg_5fdefs_2eproto);
namespace logpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Force_Speed_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fdefs_2eproto);
  return file_level_enum_descriptors_msg_5fdefs_2eproto[0];
}
bool Force_Speed_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Force_Speed_Type Force_Speed::I2C;
constexpr Force_Speed_Type Force_Speed::SPI;
constexpr Force_Speed_Type Force_Speed::Type_MIN;
constexpr Force_Speed_Type Force_Speed::Type_MAX;
constexpr int Force_Speed::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_Types_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fdefs_2eproto);
  return file_level_enum_descriptors_msg_5fdefs_2eproto[1];
}
bool Message_Types_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Pressure::_Internal {
 public:
  using HasBits = decltype(std::declval<Pressure>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Pressure::Pressure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:logpb.Pressure)
}
Pressure::Pressure(const Pressure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pressure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pressure_){}
    , decltype(_impl_.temperature_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pressure_, &from._impl_.pressure_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.pressure_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:logpb.Pressure)
}

inline void Pressure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pressure_){0}
    , decltype(_impl_.temperature_){0}
    , decltype(_impl_.type_){1}
  };
}

Pressure::~Pressure() {
  // @@protoc_insertion_point(destructor:logpb.Pressure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pressure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pressure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pressure::Clear() {
// @@protoc_insertion_point(message_clear_start:logpb.Pressure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.pressure_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.temperature_) -
        reinterpret_cast<char*>(&_impl_.pressure_)) + sizeof(_impl_.temperature_));
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pressure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .logpb.Message_Types type = 1 [default = Pressure_Type];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::logpb::Message_Types_IsValid(val))) {
            _internal_set_type(static_cast<::logpb::Message_Types>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 pressure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_pressure(&has_bits);
          _impl_.pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 temperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_temperature(&has_bits);
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pressure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logpb.Pressure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .logpb.Message_Types type = 1 [default = Pressure_Type];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional sfixed32 pressure = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(2, this->_internal_pressure(), target);
  }

  // optional sfixed32 temperature = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(3, this->_internal_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logpb.Pressure)
  return target;
}

size_t Pressure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logpb.Pressure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional sfixed32 pressure = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional sfixed32 temperature = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional .logpb.Message_Types type = 1 [default = Pressure_Type];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pressure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pressure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pressure::GetClassData() const { return &_class_data_; }


void Pressure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pressure*>(&to_msg);
  auto& from = static_cast<const Pressure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:logpb.Pressure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pressure_ = from._impl_.pressure_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.temperature_ = from._impl_.temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pressure::CopyFrom(const Pressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logpb.Pressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pressure::IsInitialized() const {
  return true;
}

void Pressure::InternalSwap(Pressure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pressure, _impl_.temperature_)
      + sizeof(Pressure::_impl_.temperature_)
      - PROTOBUF_FIELD_OFFSET(Pressure, _impl_.pressure_)>(
          reinterpret_cast<char*>(&_impl_.pressure_),
          reinterpret_cast<char*>(&other->_impl_.pressure_));
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pressure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fdefs_2eproto_getter, &descriptor_table_msg_5fdefs_2eproto_once,
      file_level_metadata_msg_5fdefs_2eproto[0]);
}

// ===================================================================

class Force_Speed::_Internal {
 public:
  using HasBits = decltype(std::declval<Force_Speed>()._impl_._has_bits_);
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Force_Speed::Force_Speed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:logpb.Force.Speed)
}
Force_Speed::Force_Speed(const Force_Speed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Force_Speed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.val_){}
    , decltype(_impl_.t_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.val_, &from._impl_.val_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.t_) -
    reinterpret_cast<char*>(&_impl_.val_)) + sizeof(_impl_.t_));
  // @@protoc_insertion_point(copy_constructor:logpb.Force.Speed)
}

inline void Force_Speed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.val_){0}
    , decltype(_impl_.t_){1}
  };
}

Force_Speed::~Force_Speed() {
  // @@protoc_insertion_point(destructor:logpb.Force.Speed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Force_Speed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Force_Speed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Force_Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:logpb.Force.Speed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.val_ = 0;
    _impl_.t_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Force_Speed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .logpb.Force.Speed.Type t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::logpb::Force_Speed_Type_IsValid(val))) {
            _internal_set_t(static_cast<::logpb::Force_Speed_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_val(&has_bits);
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Force_Speed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logpb.Force.Speed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .logpb.Force.Speed.Type t = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_t(), target);
  }

  // optional sfixed32 val = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logpb.Force.Speed)
  return target;
}

size_t Force_Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logpb.Force.Speed)
  size_t total_size = 0;

  // required .logpb.Force.Speed.Type t = 1;
  if (_internal_has_t()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_t());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional sfixed32 val = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Force_Speed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Force_Speed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Force_Speed::GetClassData() const { return &_class_data_; }


void Force_Speed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Force_Speed*>(&to_msg);
  auto& from = static_cast<const Force_Speed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:logpb.Force.Speed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.val_ = from._impl_.val_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.t_ = from._impl_.t_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Force_Speed::CopyFrom(const Force_Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logpb.Force.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Force_Speed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Force_Speed::InternalSwap(Force_Speed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.val_, other->_impl_.val_);
  swap(_impl_.t_, other->_impl_.t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Force_Speed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fdefs_2eproto_getter, &descriptor_table_msg_5fdefs_2eproto_once,
      file_level_metadata_msg_5fdefs_2eproto[1]);
}

// ===================================================================

class Force::_Internal {
 public:
  using HasBits = decltype(std::declval<Force>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_force(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Force::Force(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:logpb.Force)
}
Force::Force(const Force& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Force* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.temperature_){from._impl_.temperature_}
    , decltype(_impl_.s_){from._impl_.s_}
    , decltype(_impl_.force_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.force_, &from._impl_.force_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.force_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:logpb.Force)
}

inline void Force::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.temperature_){arena}
    , decltype(_impl_.s_){arena}
    , decltype(_impl_.force_){0}
    , decltype(_impl_.type_){2}
  };
}

Force::~Force() {
  // @@protoc_insertion_point(destructor:logpb.Force)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Force::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.temperature_.~RepeatedField();
  _impl_.s_.~RepeatedPtrField();
}

void Force::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Force::Clear() {
// @@protoc_insertion_point(message_clear_start:logpb.Force)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.temperature_.Clear();
  _impl_.s_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.force_ = 0;
    _impl_.type_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Force::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .logpb.Message_Types type = 1 [default = Force_Type];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::logpb::Message_Types_IsValid(val))) {
            _internal_set_type(static_cast<::logpb::Message_Types>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_force(&has_bits);
          _impl_.force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed32 temperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_temperature(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
            ptr += sizeof(int32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_temperature(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .logpb.Force.Speed s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_s(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Force::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logpb.Force)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .logpb.Message_Types type = 1 [default = Force_Type];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional sfixed32 force = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(2, this->_internal_force(), target);
  }

  // repeated sfixed32 temperature = 3;
  for (int i = 0, n = this->_internal_temperature_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(3, this->_internal_temperature(i), target);
  }

  // repeated .logpb.Force.Speed s = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_s_size()); i < n; i++) {
    const auto& repfield = this->_internal_s(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logpb.Force)
  return target;
}

size_t Force::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logpb.Force)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sfixed32 temperature = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_temperature_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_temperature_size());
    total_size += data_size;
  }

  // repeated .logpb.Force.Speed s = 4;
  total_size += 1UL * this->_internal_s_size();
  for (const auto& msg : this->_impl_.s_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional sfixed32 force = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .logpb.Message_Types type = 1 [default = Force_Type];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Force::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Force::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Force::GetClassData() const { return &_class_data_; }


void Force::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Force*>(&to_msg);
  auto& from = static_cast<const Force&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:logpb.Force)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.temperature_.MergeFrom(from._impl_.temperature_);
  _this->_impl_.s_.MergeFrom(from._impl_.s_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.force_ = from._impl_.force_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Force::CopyFrom(const Force& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logpb.Force)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Force::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.s_))
    return false;
  return true;
}

void Force::InternalSwap(Force* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.temperature_.InternalSwap(&other->_impl_.temperature_);
  _impl_.s_.InternalSwap(&other->_impl_.s_);
  swap(_impl_.force_, other->_impl_.force_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Force::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fdefs_2eproto_getter, &descriptor_table_msg_5fdefs_2eproto_once,
      file_level_metadata_msg_5fdefs_2eproto[2]);
}

// ===================================================================

class Data::_Internal {
 public:
  using HasBits = decltype(std::declval<Data>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:logpb.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pressure_){from._impl_.pressure_}
    , decltype(_impl_.force_){from._impl_.force_}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:logpb.Data)
}

inline void Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pressure_){arena}
    , decltype(_impl_.force_){arena}
    , decltype(_impl_.type_){3}
  };
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:logpb.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pressure_.~RepeatedPtrField();
  _impl_.force_.~RepeatedPtrField();
}

void Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:logpb.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pressure_.Clear();
  _impl_.force_.Clear();
  _impl_.type_ = 3;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .logpb.Message_Types type = 1 [default = Data_Type];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::logpb::Message_Types_IsValid(val))) {
            _internal_set_type(static_cast<::logpb::Message_Types>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .logpb.Pressure pressure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pressure(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .logpb.Force force = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_force(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logpb.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .logpb.Message_Types type = 1 [default = Data_Type];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .logpb.Pressure pressure = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pressure_size()); i < n; i++) {
    const auto& repfield = this->_internal_pressure(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .logpb.Force force = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_force_size()); i < n; i++) {
    const auto& repfield = this->_internal_force(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logpb.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logpb.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .logpb.Pressure pressure = 2;
  total_size += 1UL * this->_internal_pressure_size();
  for (const auto& msg : this->_impl_.pressure_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .logpb.Force force = 3;
  total_size += 1UL * this->_internal_force_size();
  for (const auto& msg : this->_impl_.force_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .logpb.Message_Types type = 1 [default = Data_Type];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }


void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Data*>(&to_msg);
  auto& from = static_cast<const Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:logpb.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pressure_.MergeFrom(from._impl_.pressure_);
  _this->_impl_.force_.MergeFrom(from._impl_.force_);
  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logpb.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.force_))
    return false;
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pressure_.InternalSwap(&other->_impl_.pressure_);
  _impl_.force_.InternalSwap(&other->_impl_.force_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fdefs_2eproto_getter, &descriptor_table_msg_5fdefs_2eproto_once,
      file_level_metadata_msg_5fdefs_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace logpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::logpb::Pressure*
Arena::CreateMaybeMessage< ::logpb::Pressure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logpb::Pressure >(arena);
}
template<> PROTOBUF_NOINLINE ::logpb::Force_Speed*
Arena::CreateMaybeMessage< ::logpb::Force_Speed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logpb::Force_Speed >(arena);
}
template<> PROTOBUF_NOINLINE ::logpb::Force*
Arena::CreateMaybeMessage< ::logpb::Force >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logpb::Force >(arena);
}
template<> PROTOBUF_NOINLINE ::logpb::Data*
Arena::CreateMaybeMessage< ::logpb::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logpb::Data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
